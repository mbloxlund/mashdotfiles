#!/usr/bin/env python
# encoding: utf-8
import logging
import time

try:
    import tornado.httpserver
    import tornado.ioloop
    import tornado.options
    import tornado.web
    from tornado.options import define, options
except Exception, e:
    print "you must have tornado installed."
    print "  easy_install tornado"
    print "  pip install tornado"
    import sys
    sys.exit(1)
import json

define("port", default=1111, help="run on the given port", type=int)
define("path", default="/", help="listen to given path", type=str)
define("stats", default="no", help="only show stat output", type=str, 
       metavar="yes|no")

last_message = time.time()


def sizeof_fmt(num):
    for x in ['B','KB','MB','GB','TB']:
        if num < 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0


class PostHandler(tornado.web.RequestHandler):
    def post(self):
        global last_message
        now = time.time()
        time_delta = now - last_message
        last_message = now
        try:
            data = json.loads(self.request.body)
            if options.stats == "yes":
                format = "delta: %04.2f size(tot): %s size(nbr): %05d"
                inner_data = data.get("data", [])
                logging.info(format, time_delta,
                             sizeof_fmt(len(self.request.body)),
                             len(inner_data))
            else:
                logging.info("%s", json.dumps(data,indent=4))
        except ValueError:
            logging.warning("message not json: %s", self.request.body)


def main():
    tornado.options.parse_command_line()
    application = tornado.web.Application([
        (options.path, PostHandler),
    ])
    logging.info("starting hooker on: %s", options.port)
    logging.info("listening on path: %s", options.path)
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()


if __name__ == "__main__":
    main()
