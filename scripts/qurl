#!/usr/bin/env python
# encoding: utf-8
"""
qurl - Simple curl like tool that talks AMQP

SETUP:
    qurl requires the python library kombu which you can install with:

        $ pip install kombu

    or

        $ easy_install kombu


ACTIONS:

put
    Put a message in a queue

get
    Get a single message from a queue

consume (not implemented)
    Get a continues stream of messages from a queue

See qurl -h for more options.


EXAMPLES:
    Retrieve a single message from a queue:

        $ qurl my.queue.name

    Send a typical request/response message:

        $ qurl -X PUT -H 'reply_to=my.reply.queue' -H 'correlation_id=42' \\
               -d '{"question": "who was phone?"}' questions.rpc.queue

    Get result from from my.reply.queue, decode it as JSON and print it to
    stdout in verbose mode:

        $ qurl -v -s json questions.rpc.queue

    Same as above but acknowledges the the message.

        $ qurl -v -s json -a questions.rpc.queue


KNOWN LIMITATIONS:
    * It's currently not possible to explicitly declare a Queue when the
    default Exchange is used. (cannot figure out if kombu doesn't support it).
    * Consume is not yet supported

Created by Jacob Kristhammar on 2011-09-30.
Copyright (c) 2011 Mashmobile. All rights reserved.
"""

import inspect
import json
import os
import sys
from pprint import pformat
try:
    import argparse
except ImportError:
    print "qurl requires python 2.7 or newer"
    sys.exit(-1)


SERIALIZERS = ("json", )


def main():
    parser = argparse.ArgumentParser(description=globals()["__doc__"],
                        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-X", "--action", choices=Qurl.actions(),
                        default="get", dest="action")
    parser.add_argument("-d", "--data", dest="data",
                        help="The data that will be published to an exchange")
    parser.add_argument("-s", "--serializer", choices=SERIALIZERS,
                        dest="serializer",
                        help="Will be used to decode incoming messages")
    parser.add_argument("-c", "--declare", default=False, dest="declare",
                        action="store_true",
                        help="Explicitly declares the exchange and queues as "
                             "provided by the routing_key and --exchange if "
                             "set")
    parser.add_argument("-a", "--ack", default=False, dest="ack",
                        action="store_true",
                        help="Recevied messages will be acknowledged if set")
    parser.add_argument("-m", "--mq", dest="mq",
                        default="amqplib://guest:guest@localhost:5672//",
                        help="a kombu amqp URL spec",
            metavar="transport://userid:password@hostname:port/virtual_host")
    parser.add_argument("-e", "--exchange", default="", dest="exchange",
                        help="the name of the exchange that should be used")
    parser.add_argument("-t", "--exchange-type", default="direct",
                        dest="exchange_type",
                        help="The exchange type to be declared (only has "
                             "effect when --declare is used)")
    parser.add_argument("-H", "--property", dest="properties",
                        action="append", type=kw_param, default=[],
                        help="A list of AMQP properties that should be set "
                             "when publishing messages",
                        metavar="<property_name>=<value>")

    # Debugging options
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-v", default=0, action="store_const", dest="verbosity",
                       const=1)
    group.add_argument("-vv", action="store_const", dest="verbosity", const=2)

    # Positional args
    parser.add_argument("routing_key")
    args = parser.parse_args()
    qurler = Qurl(args)
    try:
        getattr(qurler, "do_%s" % args.action.lower())()
    except Exception, e:
        # Don't handle for now
        raise


def kw_param(string):
    try:
        name, value = [v.strip() for v in string.split("=", 1)]
    except ValueError:
        raise argparse.ArgumentTypeError("invalid property parameter")
    return name, value


class Qurl(object):
    def __init__(self, opts):
        self.opts = opts
        self.verbose = False
        self._setup_logging()
        from kombu import BrokerConnection
        self.connection = BrokerConnection(self.opts.mq)
        self.channel = self.connection.channel()
        self._create_entities()
        self.serializers = {
            "json": JSON()
        }

    def do_get(self):
        from kombu import Consumer
        def on_message(body, message):
            self._print_message(message)
            if self.opts.ack:
                print "acknowledging message"
                message.ack()
        consumer = Consumer(self.channel, self.queue, callbacks=[on_message],
                            auto_declare=self.opts.declare)
        consumer.consume()
        self.connection.drain_events()

    def do_put(self):
        from kombu import Producer
        producer = Producer(self.channel, self.exchange,
                            routing_key=self.opts.routing_key,
                            auto_declare=self.opts.declare)
        data = self.opts.data
        producer.publish(data, **dict(self.opts.properties))

    def do_consume(self):
        pass

    def _setup_logging(self):
        os.unsetenv("KOMBU_LOG_DEBUG")
        os.unsetenv("KOMBU_LOG_CHANNEL")
        os.unsetenv("KOMBU_LOG_CONNECTION")
        if self.opts.verbosity >= 1:
            self.verbose = True
        if self.opts.verbosity >= 2:
            os.environ["KOMBU_LOG_DEBUG"] = "1"

    def _create_entities(self):
        from kombu import Exchange, Queue
        self.exchange = Exchange(self.opts.exchange,
                                 type=self.opts.exchange_type)
        self.queue = Queue(self.opts.routing_key, self.exchange,
                           self.opts.routing_key)

    def _pretty(self, obj):
        return pformat(obj, indent=4)

    def _print_message(self, message):
        print "PAYLOAD"
        self._print_serialized(message.payload)
        if self.verbose:
            print "PROPERTIES:"
            print pformat(message.properties, indent=4)
            print "DELIVERY_INFO:"
            print pformat(message.delivery_info, indent=4)

    def _print_serialized(self, data):
        serializer = self.serializers.get(self.opts.serializer, Identity())
        print serializer.pformat(data)

    def _serialize(self, data):
        serializer = self.serializers.get(self.opts.serializer, Identity())
        return serializer.encode(data)

    @classmethod
    def actions(cls):
        return [m[3:].upper() for m, _ in inspect.getmembers(cls) if 
                m.startswith("do_")]


class Serializer(object):
    def encode(self, obj):
        raise NotImplementedError

    def decode(self, data):
        raise NotImplementedError

    def pformat(self, obj):
        raise NotImplementedError


class Identity(Serializer):
    @classmethod
    def encode(cls, obj):
        return obj

    @classmethod
    def decode(cls, data):
        return data

    @classmethod
    def pformat(cls, obj):
        return str(obj)


class JSON(Serializer):
    @classmethod
    def encode(cls, obj):
        return json.dumps(obj)

    @classmethod
    def decode(cls, data):
        return json.loads(data)

    @classmethod
    def pformat(cls, obj):
        if isinstance(obj, basestring):
            obj = cls.decode(obj)
        return json.dumps(obj, indent=2)


if __name__ == '__main__':
    main()

